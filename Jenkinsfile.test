pipeline {
  agent any
  
  options {
     timestamps()
     disableConcurrentBuilds()
     timeout(time: 2, unit: 'HOURS') 
  }
  
  parameters {
    booleanParam(
      name: 'RUN_E2E_TESTS_STAGE',
      defaultValue: params.RUN_E2E_TESTS_STAGE ?:false,
      description: 'Runs the client-ui E2E tests'
    )

    string(
      name: 'E2E_CLUSTER_NAME', 
      defaultValue: 'test.cluster', 
      description: 'The testing cluster name for the latest nightly release of Aspen Mesh'
    )
    
    string(
      name: 'E2E_CLUSTER_HOSTNAME', 
      defaultValue: 'https://test-cluster.com', 
      description: 'The testing cluster host name for the latest nightly release of Aspen Mesh'
    )
  }
  
  stages {
    stage('Download and Upgrade') {
      steps {
        script {
          sh 'chmod +x ./scripts/print.sh'
          env.Message = sh (
            script: './scripts/print.sh',
            returnStdout: true).trim()
          echo "Running printing script: ${env.Message}"
          testString = "testingString"
          echo "$testString-postfix"
        }
      }
    }
  
    stage('E2E') {
      steps {
        script {
          test_passed = true
          try {
            env.clusterName = "${params.E2E_CLUSTER_NAME}"
            echo "Running E2E tests against ${env.clusterName}"
          } catch (e) {
            test_passed = false
          }
          
          if (!test_passed) {
            sh "exit 1"
          }
        }
      }
    }
  }
  
  post {
    failure {
     script {
      echo "Jenkins job failed!"
     }
    }
    
    fixed {
     script {
       lastBuildResult = currentBuild.getPreviousBuild().result
       echo "Last build result is $lastBuildResult"
     }
    }
  }
}
